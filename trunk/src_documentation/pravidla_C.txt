dovolím si na zaèátku specifikovat pár jednoduchých pravidel kterými by jsme se všichni mìli øídit pøi psaní kódu.
klidnì se vyjádøete s návrhy co pøidat nebo udìlat jinak (je možné že jsem se nìkde "upsal" nebo nìco nedoøešil), ale myslím že tìch pár vìcí co zmíním je akceptovatelný základ.
èasem budou pøibývat detaily, eventuelnì rozšíøení


struktura souborù 
	- zde ještì nemohu publikovat ucelenou vizi, ale projekt bude obsahovat pár ryze formálních souborù jako napø "params.c", bude-li nutno mít v projektu nìjaké parametry tak je bude struktura v tomto souboru obsahovat a bude pøístupná z kterékoliv èásti aplikace.

	- tím se dostávám k dalšímu bodu  - globální promìnné:  každá globální promìnná bude v souboru "globals.c" (globals.h) a bude zaèínat prefixem "g"  napø  gParams, gConstants atd...

	



jednotlivé soubory
	-header file obsahuje pouze exportované funkèní prototypy, vytvoøené datové typy, žádné zbyteènosti
	-je li pro knihovnu nutná jakákoliv konstanta ( #define CISLOA 1 ), bude se nacházet v souboru libset.h
		-obdobnì pro aplikaci a appset.h 

	- libset.h obsahuje pouze definice nutné pro práci knihoven (velikost alokovaných polí, konstanty knihovních funcí atd..)

	- appset.h obsahuje include na libset.h (na prvním místì) a include všech potøebných knihovních souborù

	- globals.h obsahuje include na soubory ze kterých exportuje promìnné, vèetnì params.h

	- params.h nemá include na nic, obsahuje celou svoji strukturu
									


	- každý *.c soubor aplikace bude obsahovat (vèetnì poøadí):	include na svùj header *.h
									include na globals.h
									include na ostatní knihovní soubory pokud je využívá

	- každý *.h soubor aplikace bude obsahovat (vèetnì poøadí):	include na appset.h
									include na specifické soubory, jsou-li nutné pro vytvoøení struktur, in-line funkcí nebo exportovaných prototypù (apod..)



	- každý *.c soubor knihovny bude obsahovat (vèetnì poøadí):	include na svùj header *.h
									
	- každý *.h soubor knihovny bude obsahovat (vèetnì poøadí):	include na libset.h
									include na ostatní knihovní soubory pokud je využívá (stejnì jako u souborù aplikace)



	- obsahuje-li soubor funkci inicializace, bude pokud možno úplnì dole (dobøe se to pak hledá)



psaní kódu
	- typedef - názvy datových typù, struktur, definic : psané CAPSLOCKEM, oddìlení slov možno podtržítkem ( "MSG_READ_CTX" )
	- definice #define - názvy definic také CAPSLOCKEM

	- z názvu by se mìlo dát relativnì jednoduchou logikou odhadnout co jsou zaè (promìnná s názvem "èíslo1" datatypu "pokus" mi nic nenapoví)

	- názvy funkcí zaèínají malým písmenem, navazování slov bez mezer a s velkým písmenem (sendShortMessage), výjimku tvoøí "Tick" a funkce nìèím specifické (sendShortMessage_Lock, COMM_Tick, init_Comm a pod..)  (pøi pojmenování Ticku je prakticky na Vás jestli bude mít prefix nebo ne, protože se v inicializaci stejnì pøedává jako pointer a zvenèí není pod názvem vidìt)
		(obecnì by se možná dalo zavést, že funkce volané pointrem zaèínají velkým písmenem)

	- pøedávání parametru funkcím: pøedané parametry jsou uvnitø funkce s prefixem "_" , dá se tak jednoduše rozlišit co je zvenèí a co je definované samotnou funkcí.  ( void init_Comm(struct COMM_DESC * _desc)  )

	- enumerátory obsahují prefix, který napoví co je konstanta zaè (a zamezí se násobným definicím v pøípadì podobných struktur)
		položky enumerátoru stejnì jako definice VELKYMI_PISMENY




komentování kódu
	- opøel bych se o program DoxyGen http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#cppblock

komentáøe v *.c a *.h musí být shodné  (doporuèuji CTRL+C  CTRL+V )


	hlavicka souboru (od prvniho radku)

//----------------------------------------------------
/**
	\file		src_documentation/pravidla_C.txt
	\ingroup	Lib (appName/cpu/HW/...)


	\brief		(Strucný popis) Pokus o ustanoveni jednotneho stylu psani kodu

	\author		Stanek Jan
	\version	01.02
	\date		22.2.2013
*/
//----------------------------------------------------




	brief funkce (tesne pred funkci)

//--------------------------------------------------
/**
	\brief	Strucny popis funkce

	\note	Podrobnejsi popis/ specifikace pouziti (je-li potreba, jinak se psat nemusi)

	\param	_paramName	strucny popis parametru funkce
	\param	_param2Name	strucny popis parametru2 funkce

	\return strucny popis navratove hodnoty  (vraci cislo chyby/vraci pocet prvku/vraci TRUE pokud... ,jinak FALSE / atd...)
*/
//--------------------------------------------------




	promenna (na stejnem radku za promennou)

	int var; //!< Popis promenne





	bloky definic (tesne pred definicemi)
//--------------------------------------------------
/**
	\brief	Strucny popis bloku

	\note	Podrobnejsi popis/ specifikace pouziti (je-li potreba, jinak se psat nemusi)

	\param	DEF1NAME	strucny popis	(misto tohoto popisu asi pouzit komentovani na radku jako u promennych)
	\param	DEF2NAME	strucny popis	(misto tohoto popisu asi pouzit komentovani na radku jako u promennych)

*/
//--------------------------------------------------




